"""
Given a binary search tree and the lowest and highest boundaries as L and R, trim the tree so that all its elements lies in [L, R] 
(R >= L). You might need to change the root of the tree, so the result should return the new root of the trimmed binary search tree.
Example 1:
Input: 
    1
   / \
  0   2
  L = 1
  R = 2
Output: 
    1
      \
       2
Example 2:
Input: 
    3
   / \
  0   4
   \
    2
   /
  1

  L = 1
  R = 3
Output: 
      3
     / 
   2   
  /
 1
"""

class Solution(object):
    def trimBST(self, root, L, R):
        """
        :type root: TreeNode
        :type L: int
        :type R: int
        :rtype: TreeNode
        """
        def trim(node):
            if node is None:
                return None
            elif L <= node.val <= R:
                node.left = trim(node.left)
                node.right = trim(node.right)
                return node
            elif L < node.val:
                return trim(node.left)
            elif node.val < R:
                return trim(node.right)
            else:
                return None
        
        if root is None:
            return None
        return trim(root)

"""
My Solution:
Runtime: 44 ms
Memory Usage: 19.6 MB
"""
