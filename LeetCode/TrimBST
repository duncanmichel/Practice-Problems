"""
Given a binary search tree and the lowest and highest boundaries as L and R, trim the tree so that all its elements lies in [L, R] 
(R >= L). You might need to change the root of the tree, so the result should return the new root of the trimmed binary search tree.
Example 1:
Input: 
    1
   / \
  0   2
  L = 1
  R = 2
Output: 
    1
      \
       2
Example 2:
Input: 
    3
   / \
  0   4
   \
    2
   /
  1

  L = 1
  R = 3
Output: 
      3
     / 
   2   
  /
 1
"""

class Solution(object):
    def trimBST(self, root, L, R):
        """
        :type root: TreeNode
        :type L: int
        :type R: int
        :rtype: TreeNode
        """
        def trim(node):
            if node is None:
                return None
            elif L <= node.val <= R:
                node.left = trim(node.left)
                node.right = trim(node.right)
                return node
            elif L < node.val:
                return trim(node.left)
            elif node.val < R:
                return trim(node.right)
            else:
                return None
        
        if root is None:
            return None
        return trim(root)

"""
My Solution:
Runtime: 44 ms, faster than 85.93% of Python online submissions for Trim a Binary Search Tree.
Memory Usage: 19.7 MB, less than 5.13% of Python online submissions for Trim a Binary Search Tree.
"""

"""
Fastest Solution (40ms):
class Solution(object):
    def trimBST(self, root, L, R):
        if  not root:
            return None
        if root.val < L:
            return self.trimBST(root.right,L,R)
        elif root.val > R:
            return self.trimBST(root.left,L,R)
        else:
            root.left = self.trimBST(root.left,L,R)
            root.right = self.trimBST(root.right,L,R)
        return root

Smallest Memory (14956 kb):
class Solution(object):
    def helper(self, start, L, R):
        if not start:
            return None
        if L <= start.val <= R:
            start.left = self.helper(start.left, L, R)
            start.right = self.helper(start.right, L, R)
            return start
        elif start.val > R:
            start.right = None # no need to check right tree, for this case
            start.left = self.helper(start.left, L, R)
            if not start.left and not start.right:
                return None
            else:
                return start.left                
        elif start.val < L:
            start.left = None # no need to check right tree
            start.right = self.helper(start.right, L, R)
            if not start.left and not start.right:
                return None
            else:
                return start.right
    
    def trimBST(self, root, L, R):        
        return self.helper(root, L, R)
"""
